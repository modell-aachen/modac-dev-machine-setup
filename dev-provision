#!/usr/bin/env bash

usage() {
    cat << USAGE
Description:
  Shorthand script to start the ansible provisioning playbook with different
  tags. By default it will run the full provisioning suite.
  example usage:
    ./dev-provision -i provisioning/inventory_custom_example.yml

Usage:
  dev-provision [configuration]

Available configurations
  dotfiles              only provision dotfiles
  packages              only provision system packages
  tooling               only provision tooling
  scripts               only provision scripts (modac-bash)
  upgrade-provisioner   will upgrade the dev machine provisioner,
                        i.e. checkout newest version and install requirements

Flags:
  -h, --help         shows this help message
  -i, --inventory    path to an inventory file
USAGE
}

upgrade() {
  echo ">> Upgrading dev machine provisioner ..."
  git pull

  setup "--force"
  echo ">> Upgrade finished."
}

setup() {
  echo ">> Checking if required setup is already done..."
  echo ">> Checking default python version .."

  if ! python -c 'import sys; assert sys.version_info >= (3,9)' &> /dev/null; then
    echo ">> [ERROR] Your default python version is too old. Python >= 3.9 required."
    exit 1
  else
    echo ">> Python 3.9 requirement satisfied."
  fi

  if [[ "$(uname -s)" = "Linux"* ]]; then
    installedAnsileBase=$(sudo apt list --installed ansible-base 2>/dev/null)
    if [[ "$installedAnsileBase" = *"ansible-base"* ]]; then
        echo ">> Purging ansible-base installation through apt"
        echo ">> $ sudo apt remove -y ansible-base"
        sudo apt remove -y ansible-base
    fi

    installedAnsibleBase=$(sudo apt list --installed ansible 2>/dev/null)
    if [[ "$installedAnsibleBase" = *"ansible"* ]]; then
        echo ">> Purging ansible installation through apt"
        echo ">> $ sudo apt remove -y ansible"
        sudo apt remove -y ansible
    fi
  fi

  if [ ! -x "$(command -v ansible)" ]; then
    echo ">> Installing latest version of ansible using pip"
    sudo -H pip3 install ansible
    sudo -H pip3 install paramiko
    echo ">> Done."
  fi


  echo ">> Install/Updating ansible roles using ansible-galaxy"
  ansible-galaxy install $1 -p ./provisioning/roles -r ./provisioning/requirements.yml
  echo ">> Done."

}

provision() {
    local tags=$1

    tags=${tags:-all}
    local message=${tags:-full system}
    setup
    echo ">> Starting $message provisioning ..."
    ansible-playbook \
        --connection=local \
        -i localhost, \
        -i ./provisioning/inventory.yml \
        $inventory \
        -K --tags "$tags" provisioning/playbook.yml
    echo ">> Finished."
}

OPTS=`getopt -o hi: --long inventory:,help -- "$@"`
if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

inventory="-i ${HOME}/.inventory_local.yml"

while true; do
    case "$1" in
        -i | --inventory )
            inventory="-i $2"
            shift 2 ;;
        -h | --help )
            usage
            exit
            shift ;;
        -- )
            shift
            break ;;
        * )
            break ;;
    esac
done

case "$1" in
    upgrade-provisioner )
        upgrade
        ;;
    dotfiles )
        provision dotfiles
        ;;
    tooling )
        provision tooling
        ;;
    packages )
        provision packages
        ;;
    scripts )
        provision scripts
        ;;
    * )
        provision
        ;;
esac
