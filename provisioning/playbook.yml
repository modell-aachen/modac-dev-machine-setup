---
- hosts: all
  vars_files:
    - vars/main.yml
    - vars/tooling_version.yml
  vars:
    all_env: |
      {{ dev.env | combine(env) }}
    all_snaps: |
      {{ dev.snaps | union(snaps) }}
    all_remove_snaps: |
      {{ dev.remove_snaps | union(remove_snaps) }}
    all_packages_debian: |
      {{ dev.packages | union(packages) }}
    all_remove_packages_debian: |
      {{ dev.remove_packages | union(remove_packages) }}
    all_packages_darwin: |
      {{ dev.packages_darwin | union(packages_darwin) }}
    all_remove_packages_darwin: |
      {{ dev.remove_packages_darwin | union(remove_packages_darwin) }}
    all_dev_install_modules: |
      {{ dev.install_modules + install_modules }}
    all_service_install_modules: |
      {{ service.install_modules + install_modules }}
    all_kubectl_plugins: |
      {{ dev.kubectl_plugins | union(kubectl_plugins) }}
    all_pip_packages: |
      {{ dev.pip_packages | union(pip_packages) }}
    all_homebrew_casks: |
      {{ dev.homebrew.cask_apps | union(homebrew.cask_apps | default([])) }}
    all_homebrew_packages: |
      {{ dev.homebrew.installed_packages | union(homebrew.installed_packages | default([])) }}
    all_homebrew_taps: |
      {{ dev.homebrew.taps | union(homebrew.taps | default([])) }}

  pre_tasks:
    - name: Derive host machine facts and set variables.
      tags:
        - always
      block:
        - name: Set general incompatibility
          set_fact:
            is_ubuntu: false
            is_macos: false

        - name: Set Ubuntu compatibility
          set_fact:
            is_ubuntu: true
          when: ansible_facts['os_family'] == "Debian"

        - name: Set MAC OSX compatibility
          set_fact:
            is_macos: true
          when: ansible_facts['os_family'] == "Darwin" and not is_ubuntu

        - name: Set architecture to amd64
          set_fact:
            machine_architecture: "amd64"
          when: ansible_facts['machine'] == "x86_64"

        - name: Set architecture to arm64
          set_fact:
            machine_architecture: "arm64"
          when: ansible_facts['machine'] == "arm64" or ansible_facts['machine'] == "aarch64"

  roles:
    - role: geerlingguy.mac.homebrew
      tags: ['homebrew']
      vars:
        homebrew_installed_packages: "{{ all_homebrew_packages }}"
        homebrew_taps: "{{ all_homebrew_taps }}"
        homebrew_cask_appdir: "{{ dev.homebrew.cask_appdir }}"
        homebrew_cask_apps: "{{ all_homebrew_casks }}"
        homebrew_install_path: "/opt/homebrew/Homebrew"
      when: is_macos

  tasks:
    - name: Install and Remove pip-packages
      block:
        - name: Install global Pip packages.
          pip:
            name: "{{ item.name | default(item) }}"
            state: "{{ item.state | default('present') }}"
            version: "{{ item.version | default(omit) }}"
            executable: "{{ item.executable | default('pip3') }}"
          loop: "{{ all_pip_packages }}"
      tags:
        - packages
        - pip_packages

    - name: Install and Remove packages
      block:
        - include_tasks:
            file: tasks/install_packages.yml
        - include_tasks:
            file: tasks/remove_packages.yml
      tags:
        - packages

    - name: Configure packages on MacOS
      block:
        - name: Add usr/local/bin directory
          include_tasks:
            file: "tasks/configure/Darwin/folder.yaml"
        - name: Configure shell rc on macos
          include_tasks:
            file: "tasks/configure/Darwin/shell.yaml"
        - name: Configure docker on macos
          include_tasks:
            file: "tasks/configure/Darwin/docker.yaml"
        - name: Configure dnsmasq on macos
          include_tasks:
            file: "tasks/configure/Darwin/dnsmasq.yaml"
      tags:
        - configure
      when: is_macos

    - name: Install and Remove snap packages (Ubuntu only)
      become: true
      block:
        - name: Installing snaps
          include_tasks:
            file: tasks/install_snaps.yml
        - name: Removing snaps
          include_tasks:
            file: tasks/remove_snaps.yml
      when: is_ubuntu and install_snaps
      tags:
        - packages

    - name: Install tooling for dev only
      block:
        - name: Loop over custom modules for dev
          include_tasks:
            file: "tasks/install/_install_module_if_existing.yaml"
          loop: "{{ all_dev_install_modules }}"
          loop_control:
            loop_var: module
      when: service_tooling_only is undefined or not service_tooling_only
      tags:
        - tooling

    - name: Install tooling for service only
      block:
        - name: Loop over custom modules for service
          include_tasks:
            file: "tasks/install/_install_module_if_existing.yaml"
          loop: "{{ all_service_install_modules }}"
          loop_control:
            loop_var: module
      when: service_tooling_only is defined and service_tooling_only
      tags:
        - tooling

    - name: Install and configure modac-bash
      block:
        - include_tasks:
            file: tasks/setup_modac_bash.yml

        - name: Derive QWIKI_SSL_CA_CERT env
          ansible.builtin.command: |
            python3 -c 'import requests; print(requests.certs.where())'
          register: ca_cert_path

        - name: Write enviroment variables
          lineinfile:
            path: "{{ ansible_env.HOME }}/.env"
            regexp: "^export {{ item.key }}="
            line: "export {{ item.key }}=\"{{ item.value }}\""
            create: true
          loop: "{{ {'QWIKI_SSL_CA_CERT': ca_cert_path.stdout } | combine(all_env) | dict2items }}"

        - name: Install modac-bash-helper based on python
          shell:
            cmd: |
              export NEXUS_BOT_TOKEN={{ env.NEXUS_BOT_TOKEN }}
              if [ -f "$HOME/.modac-bash/install_modac_shell_helper.sh" ]; then
                bash -e "$HOME/.modac-bash/install_modac_shell_helper.sh"
              fi
      tags:
        - scripts

    - name: Install and configure kubernetes credentials
      block:
        - include_tasks:
            file: tasks/setup_k8s_cluster.yml
      tags:
        - creds

    - include_tasks:
        file: tasks/install_dotfiles.yml
        apply:
          tags:
            - always
      tags:
        - dotfiles
